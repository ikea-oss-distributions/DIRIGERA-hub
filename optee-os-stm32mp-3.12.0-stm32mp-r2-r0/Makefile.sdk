# Set default path
SRC_PATH ?= $(PWD)
BLD_PATH ?= $(SRC_PATH)/../build
DEPLOYDIR ?= $(SRC_PATH)/../deploy

# Set default optee-os config
CFG_EMBED_DTB_SOURCE_FILE ?=       stm32gw20-ev1 stm32gw20-ev2 

# Configure default optee-os features
ENABLE_FIP ?= 1

# Remove default variables
LDFLAGS =
CFLAGS =
CPPFLAGS =
# Define default make options
EXTRA_OEMAKE = PLATFORM=stm32mp1 CROSS_COMPILE_core=arm-poky-linux-gnueabi- CROSS_COMPILE_ta_arm64=arm-poky-linux-gnueabi- CFG_ARM32_core=y CROSS_COMPILE_ta_arm32=arm-poky-linux-gnueabi- NOWERROR=1 LDFLAGS= LIBGCC_LOCATE_CFLAGS=$(KCFLAGS)  CFG_TEE_CORE_LOG_LEVEL=2 CFG_TEE_CORE_DEBUG=n CFG_STM32_BSEC_WRITE=y                                     CFG_IN_TREE_EARLY_TAS=remoteproc/80a4c275-0a47-4905-8285-1486a9771a08  CFG_RPROC_PTA=y  CFG_SIGN_TA=n  CFG_NUM_THREADS=1  CFG_TEE_CORE_LOG_LEVEL=1
ifeq ($(ENABLE_FIP), 0)
EXTRA_OEMAKE += CFG_STM32MP15x_STM32IMAGE=y
endif

# Configure default optee-os features
ifeq ($(ENABLE_FIP), 1)
OPTEE_SUFFIX ?= bin
else
OPTEE_SUFFIX ?= stm32
endif

# Set dependencies list for building all
DEPS = optee
ifeq ($(ENABLE_FIP), 1)
DEPS += fip
endif

help:
	@echo
	@echo "OPTEE-OS configuration:"
	@echo "  CFG_EMBED_DTB_SOURCE_FILE = $(CFG_EMBED_DTB_SOURCE_FILE)"
	@echo
	@echo "OPTEE-OS folder configuration:"
	@echo "  SRC_PATH  = $(SRC_PATH)"
	@echo "  BLD_PATH  = $(BLD_PATH)"
	@echo "  DEPLOYDIR = $(DEPLOYDIR)"
	@echo
	@echo "FIP configuration:"
	@echo "  ENABLE_FIP = $(ENABLE_FIP) ('1' to generate fip binary)"
ifeq ($(ENABLE_FIP),1)
	@echo "  Do not forget to set FIP deploydir folders (such as FIP_DEPLOYDIR_ROOT) to provide path to needed binaries"
endif
	@echo
	@echo "Available targets:"
	@echo "  all   : build OPTEE-OS binaries for defined config(s)"
	@echo "  clean : clean build directories from generated files"
	@echo

all: $(DEPS)

optee:
	@mkdir -p $(DEPLOYDIR)
	@mkdir -p $(DEPLOYDIR)/debug
	@if test -n "$(CFG_EMBED_DTB_SOURCE_FILE)" ; then \
		for dt in $(CFG_EMBED_DTB_SOURCE_FILE) ; do \
			$(MAKE) $(EXTRA_OEMAKE) -C $(SRC_PATH) PREFIX=$(SDKTARGETSYSROOT) O=$(BLD_PATH)/$$dt CFG_EMBED_DTB_SOURCE_FILE=$$dt.dts ; \
			# Copy binary files with explicit name \
			cp $(BLD_PATH)/$$dt/core/tee-header_v2.$(OPTEE_SUFFIX) $(DEPLOYDIR)/tee-header_v2-$$dt.$(OPTEE_SUFFIX) ; \
			cp $(BLD_PATH)/$$dt/core/tee-pager_v2.$(OPTEE_SUFFIX) $(DEPLOYDIR)/tee-pager_v2-$$dt.$(OPTEE_SUFFIX) ; \
			cp $(BLD_PATH)/$$dt/core/tee-pageable_v2.$(OPTEE_SUFFIX) $(DEPLOYDIR)/tee-pageable_v2-$$dt.$(OPTEE_SUFFIX) ; \
			cp $(BLD_PATH)/$$dt/core/tee.elf $(DEPLOYDIR)/debug/tee-$$dt.elf ; \
		done ; \
	else \
		$(MAKE) $(EXTRA_OEMAKE) -C $(SRC_PATH) PREFIX=$(SDKTARGETSYSROOT) O=$(BLD_PATH)/ ; \
		# Copy binary files with explicit name \
		cp $(BLD_PATH)/core/tee-header_v2.$(OPTEE_SUFFIX) $(DEPLOYDIR)/ ; \
		cp $(BLD_PATH)/core/tee-pager_v2.$(OPTEE_SUFFIX) $(DEPLOYDIR)/ ; \
		cp $(BLD_PATH)/core/tee-pageable_v2.$(OPTEE_SUFFIX) $(DEPLOYDIR)/ ; \
		cp $(BLD_PATH)/core/tee.elf $(DEPLOYDIR)/debug/ ; \
	fi

fip: optee
	FIP_DEPLOYDIR_OPTEE=$(DEPLOYDIR) FIP_DEVICETREE="$(CFG_EMBED_DTB_SOURCE_FILE)" fiptool-stm32mp

clean:
	@echo "Removing $(BLD_PATH) ..."
	@rm -rf $(BLD_PATH)
	@echo "Removing $(DEPLOYDIR) ..."
	@rm -rf $(DEPLOYDIR)
	@echo
