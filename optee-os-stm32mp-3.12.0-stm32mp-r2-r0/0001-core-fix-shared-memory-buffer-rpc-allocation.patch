From ae2a9cfce3203e49bca04f31552c922f3b1978ba Mon Sep 17 00:00:00 2001
From: Jorge Ramirez-Ortiz <jorge@foundries.io>
Date: Thu, 15 Oct 2020 17:13:45 +0200
Subject: [PATCH] core: fix shared memory buffer rpc allocation

When dynamic shared memory has been configured, contiguous shared
memory regions outside reserved SHM need to be included in the
allocation pool.

To keep the implementation simple, we will restrict the size of these
allocations to a single page;  we can then leverage the mechanism used
for the allocation of arguments.

Signed-off-by: Jorge Ramirez-Ortiz <jorge@foundries.io>
Reviewed-by: Jens Wiklander <jens.wiklander@linaro.org>
Reviewed-by: Etienne Carriere <etienne.carriere@linaro.org>
---
 core/arch/arm/kernel/thread_optee_smc.c | 59 ++++++++++++++++---------
 1 file changed, 37 insertions(+), 22 deletions(-)

diff --git a/core/arch/arm/kernel/thread_optee_smc.c b/core/arch/arm/kernel/thread_optee_smc.c
index 7fe97b9c..25a90cf5 100644
--- a/core/arch/arm/kernel/thread_optee_smc.c
+++ b/core/arch/arm/kernel/thread_optee_smc.c
@@ -5,6 +5,7 @@
 
 #include <assert.h>
 #include <compiler.h>
+#include <config.h>
 #include <io.h>
 #include <kernel/misc.h>
 #include <kernel/msg_param.h>
@@ -283,6 +284,19 @@ out:
 	return rv;
 }
 
+static struct mobj *rpc_shm_mobj_alloc(paddr_t pa, size_t sz, uint64_t cookie)
+{
+	/* Check if this region is in static shared space */
+	if (core_pbuf_is(CORE_MEM_NSEC_SHM, pa, sz))
+		return mobj_shm_alloc(pa, sz, cookie);
+
+	if (IS_ENABLED(CFG_CORE_DYN_SHM) &&
+	    !(pa & SMALL_PAGE_MASK) && sz <= SMALL_PAGE_SIZE)
+		return mobj_mapped_shm_alloc(&pa, 1, 0, cookie);
+
+	return NULL;
+}
+
 /**
  * Allocates data for struct optee_msg_arg.
  *
@@ -309,14 +323,7 @@ static struct mobj *thread_rpc_alloc_arg(size_t size)
 	if (!ALIGNMENT_IS_OK(pa, struct optee_msg_arg))
 		goto err;
 
-	/* Check if this region is in static shared space */
-	if (core_pbuf_is(CORE_MEM_NSEC_SHM, pa, size))
-		mobj = mobj_shm_alloc(pa, size, co);
-#ifdef CFG_CORE_DYN_SHM
-	else if ((!(pa & SMALL_PAGE_MASK)) && size <= SMALL_PAGE_SIZE)
-		mobj = mobj_mapped_shm_alloc(&pa, 1, 0, co);
-#endif
-
+	mobj = rpc_shm_mobj_alloc(pa, size, co);
 	if (!mobj)
 		goto err;
 
@@ -523,25 +530,25 @@ static struct mobj *get_rpc_alloc_res(struct optee_msg_arg *arg,
 {
 	struct mobj *mobj = NULL;
 	uint64_t cookie = 0;
+	size_t sz = 0;
+	paddr_t p = 0;
 
 	if (arg->ret || arg->num_params != 1)
 		return NULL;
 
-	if (arg->params[0].attr == OPTEE_MSG_ATTR_TYPE_TMEM_OUTPUT) {
-		cookie = arg->params[0].u.tmem.shm_ref;
-		mobj = mobj_shm_alloc(arg->params[0].u.tmem.buf_ptr,
-				      arg->params[0].u.tmem.size,
-				      cookie);
-	} else if (arg->params[0].attr == (OPTEE_MSG_ATTR_TYPE_TMEM_OUTPUT |
-					   OPTEE_MSG_ATTR_NONCONTIG)) {
-		paddr_t p = arg->params[0].u.tmem.buf_ptr;
-		size_t sz = arg->params[0].u.tmem.size;
-
-		cookie = arg->params[0].u.tmem.shm_ref;
-		mobj = msg_param_mobj_from_noncontig(p, sz, cookie, true);
-	} else {
+	if (arg->params[0].attr != OPTEE_MSG_ATTR_TYPE_TMEM_OUTPUT  &&
+	    arg->params[0].attr != (OPTEE_MSG_ATTR_TYPE_TMEM_OUTPUT |
+				    OPTEE_MSG_ATTR_NONCONTIG))
 		return NULL;
-	}
+
+	p = arg->params[0].u.tmem.buf_ptr;
+	sz = arg->params[0].u.tmem.size;
+	cookie = arg->params[0].u.tmem.shm_ref;
+
+	if (arg->params[0].attr == OPTEE_MSG_ATTR_TYPE_TMEM_OUTPUT)
+		mobj = rpc_shm_mobj_alloc(p, sz, cookie);
+	else
+		mobj = msg_param_mobj_from_noncontig(p, sz, cookie, true);
 
 	if (!mobj) {
 		thread_rpc_free(bt, cookie, mobj);
@@ -587,6 +594,14 @@ struct mobj *thread_rpc_alloc_payload(size_t size)
 
 struct mobj *thread_rpc_alloc_kernel_payload(size_t size)
 {
+	/*
+	 * Error out early since kernel private dynamic shared memory
+	 * allocations don't currently use the `OPTEE_MSG_ATTR_NONCONTIG` bit
+	 * and therefore cannot be larger than a page.
+	 */
+	if (IS_ENABLED(CFG_CORE_DYN_SHM) && size > SMALL_PAGE_SIZE)
+		return NULL;
+
 	return thread_rpc_alloc(size, 8, OPTEE_RPC_SHM_TYPE_KERNEL);
 }
 
-- 
2.27.0

