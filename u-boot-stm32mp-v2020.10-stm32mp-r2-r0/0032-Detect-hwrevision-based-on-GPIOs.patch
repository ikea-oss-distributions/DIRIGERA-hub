From 5ff0635591849d201931cb79dec43ccd44de5bbe Mon Sep 17 00:00:00 2001
From: Kamel Bouhara <kamel.bouhara@inter.ikea.com>
Date: Tue, 27 Jul 2021 16:38:42 +0200
Subject: [PATCH] Detect hwrevision based on GPIOs

Signed-off-by: Kamel Bouhara <kamel.bouhara@inter.ikea.com>
Signed-off-by: Kory Maincent <kory.maincent@inter.ikea.com>
---
 board/st/stm32mp1/stm32mp1.c | 32 +++++++++++++++++++++++++++++++-
 cmd/ikeixboot.c              | 22 +++++++++++++++++++++-
 2 files changed, 52 insertions(+), 2 deletions(-)

diff --git a/board/st/stm32mp1/stm32mp1.c b/board/st/stm32mp1/stm32mp1.c
index 9a02e14ba5..7d5d6e07df 100644
--- a/board/st/stm32mp1/stm32mp1.c
+++ b/board/st/stm32mp1/stm32mp1.c
@@ -86,15 +86,41 @@ DECLARE_GLOBAL_DATA_PTR;
 #define USB_START_LOW_THRESHOLD_UV	1230000
 #define USB_START_HIGH_THRESHOLD_UV	2150000
 
+#define REV_BIT0 	77  //PE13
+#define REV_BIT1 	78  //PE14
+#define REV_BIT2 	79  //PE15
+
 int board_early_init_f(void)
 {
 	/* nothing to do, only used in SPL */
 	return 0;
 }
 
+static unsigned int get_hw_revision(void)
+{
+	int hwrev = 0;
+	char str[10];
+	int i;
+
+	for (i = 0; i < 3; i++) {
+		int pin = i + REV_BIT0;
+		sprintf(str, "rev_bit%d", i);
+		gpio_request(pin, str);
+		gpio_direction_input(pin);
+	}
+
+	udelay(1);
+
+	for (i = 0; i < 3; i++)
+		hwrev |= (gpio_get_value(REV_BIT0 + i) << i);
+
+	return hwrev;
+}
+
 int checkboard(void)
 {
 	int ret;
+	int hwrev;
 	char *mode;
 	u32 otp;
 	struct udevice *dev;
@@ -108,7 +134,7 @@ int checkboard(void)
 	else
 		mode = "basic";
 
-	printf("Board: stm32mp1 in %s mode", mode);
+	printf("Board: stm32mp1 in %s mode, hwrev 0x%x", mode, get_hw_revision());
 	fdt_compat = fdt_getprop(gd->fdt_blob, 0, "compatible",
 				 &fdt_compat_len);
 	if (fdt_compat && fdt_compat_len)
@@ -678,6 +704,7 @@ int board_late_init(void)
 {
 	const void *fdt_compat;
 	int fdt_compat_len;
+	int hwrev;
 	int ret;
 	u32 otp;
 	struct udevice *dev;
@@ -685,6 +712,9 @@ int board_late_init(void)
 	char dtb_name[256];
 	int buf_len;
 
+	hwrev = get_hw_revision();
+	env_set_hex("board_hwrev", hwrev);
+
 	if (IS_ENABLED(CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG)) {
 		fdt_compat = fdt_getprop(gd->fdt_blob, 0, "compatible",
 					 &fdt_compat_len);
diff --git a/cmd/ikeixboot.c b/cmd/ikeixboot.c
index 2f2c53a7fb..cc0607cefe 100644
--- a/cmd/ikeixboot.c
+++ b/cmd/ikeixboot.c
@@ -14,6 +14,7 @@
 #include <common.h>
 #include <fs.h>
 #include <mapmem.h>
+#include <malloc.h>
 #include <linux/delay.h>
 
 static int getfile(struct cmd_tbl *cmdtp, char *partition, char *file_addr)
@@ -35,6 +36,7 @@ static int getfile(struct cmd_tbl *cmdtp, char *partition, char *file_addr)
 int do_ikeixboot(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
 {
 	unsigned long fit_image_ram_address;
+	unsigned int hwrev;
 	int res = 0;
 
 	if (argc < 3)
@@ -51,7 +53,24 @@ int do_ikeixboot(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
 	}
 
 	printf("image.fit loaded\n");
-	char * const bootm_argv[] = { argv[2] };
+
+	char * bootm_argv[2];
+	bootm_argv[1] = NULL;
+	char image_conf[64];
+
+	hwrev = env_get_hex("board_hwrev", 0x1);
+	if (hwrev == 0x2)
+		sprintf(image_conf, "%s#conf-stm32gw20-ev2.dtb", argv[2]);
+	else
+		sprintf(image_conf, "%s", argv[2]);
+
+	bootm_argv[0] = (char *) malloc(sizeof(char) * (strlen(image_conf) + 1));
+	if ( bootm_argv[0] == 0 ) {
+		printf("ERROR: out of memory");
+		return CMD_RET_FAILURE;
+	}
+	memcpy(bootm_argv[0], image_conf, strlen(image_conf) + 1 );
+
 	ulong kernel_addr;
 	char *buf;
 
@@ -66,6 +85,7 @@ int do_ikeixboot(struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
 		BOOTM_STATE_OS_GO, &images, 1);
 
 	// We should not get here...
+	free(bootm_argv[0]);
 	unmap_sysmem(buf);
 	printf("\n### Boot failed ###\n\n");
 	mdelay(2000);
-- 
2.27.0
