From aca7ec74183015d605bc7d855a6d726005c7722c Mon Sep 17 00:00:00 2001
From: WojciechJakubiszyn <wojciech.jakubiszyn.sigma.com>
Date: Thu, 17 Feb 2022 00:08:00 +0100
Subject: [PATCH 1/1] Implement legacy bootcount handling

---
 plat/st/stm32mp1/bl2_plat_setup.c           | 28 ++++++++++++++++
 plat/st/stm32mp1/include/stm32mp1_private.h |  3 ++
 plat/st/stm32mp1/stm32mp1_private.c         | 42 +++++++++++++++++++++
 3 files changed, 73 insertions(+)

diff --git a/plat/st/stm32mp1/bl2_plat_setup.c b/plat/st/stm32mp1/bl2_plat_setup.c
index ddd463093..3a1cac1d5 100644
--- a/plat/st/stm32mp1/bl2_plat_setup.c
+++ b/plat/st/stm32mp1/bl2_plat_setup.c
@@ -200,11 +200,39 @@ void bl2_platform_setup(void)
 		ERROR("DDR mapping: error %d\n", ret);
 		panic();
 	}
+	
+	if (dt_pmic_status() <= 0) {
+		ERROR("PMIC status: error \n");
+		panic();
+	}
+
+	struct rdev* buck3 = regulator_get_by_name("buck3");
+	if ((regulator_set_flag(buck3, REGUL_OCP) < 0) ||
+	    (regulator_set_flag(buck3, REGUL_MASK_RESET) < 0)) {
+		ERROR("Failed to write buck3 reset mask\n");
+		panic();
+	}
 
 	if (stm32mp_verity_check(true) == VERITY_FAIL) {
 		INFO("Reset to switch slot as verity failed.\n");
 		stm32mp_system_reset();
 	}
+	
+	if (stm32mp_bootcounter_max_reached(true) == true) {
+#if STM32MP_SDMMC || STM32MP_EMMC
+		INFO("Boot cnt: reset due to bootcounter's max reached\n");
+		int boot_ret = mmc_set_ext_csd_bootpart((mmc_get_ext_csd_bootpart() & 1) + 1);
+		if (boot_ret != 0) {
+			ERROR("Failed to update to new boot partition: %i\n", boot_ret);
+			panic();
+		}
+#else
+		ERROR("STM32MP_SDMMC or STM32MP_EMMC not ebabled, boot partition has not been changed \n");
+#endif /* STM32MP_SDMMC || STM32MP_EMMC */
+		stm32mp_system_reset();
+	}
+	
+	stm32mp_bootcounter_inc();
 }
 
 static void update_monotonic_counter(void)
diff --git a/plat/st/stm32mp1/include/stm32mp1_private.h b/plat/st/stm32mp1/include/stm32mp1_private.h
index 9fad7bc45..84c123ad7 100644
--- a/plat/st/stm32mp1/include/stm32mp1_private.h
+++ b/plat/st/stm32mp1/include/stm32mp1_private.h
@@ -65,6 +65,9 @@ void stm32mp_update_fwu_boot_index(uint32_t idx);
 bool stm32mp_achieve_max_attemps(void);
 #endif
 
+void stm32mp_bootcounter_inc(void);
+bool stm32mp_bootcounter_max_reached(bool reset);
+
 #if defined(IMAGE_BL32) && DEBUG
 void stm32mp_dump_core_registers(bool fcore);
 #endif
diff --git a/plat/st/stm32mp1/stm32mp1_private.c b/plat/st/stm32mp1/stm32mp1_private.c
index e5b6aba6d..8ca717862 100644
--- a/plat/st/stm32mp1/stm32mp1_private.c
+++ b/plat/st/stm32mp1/stm32mp1_private.c
@@ -21,6 +21,13 @@
 #include <plat/common/platform.h>
 #include <smccc_helpers.h>
 
+#define BOOTCOUNT_MAGIC_MASK		GENMASK(31, 16)
+#define BOOTCOUNT_MAGIC			0xB0010000U
+#define BOOTCOUNT_MASK				GENMASK(15, 0)
+#define BOOTCOUNT_RESET_VALUE		0x0000FFFFU
+#define BOOTCOUNT_MAX_RETRY		3U
+#define TAMP_BKP_NONSEC_BOOTCOUNT	21U
+
 #define TAMP_BKP_NONSEC_VERITY		19u
 #define VERITY_FAIL_MASK		(1 << 0)
 #define VERITY_OTA_MASK			(1 << 1)
@@ -900,6 +907,41 @@ bool stm32mp_achieve_max_attemps(void)
 }
 #endif
 
+void stm32mp_bootcounter_inc(void)
+{
+	uint32_t bootcount = tamp_bkpr(TAMP_BKP_NONSEC_BOOTCOUNT);
+	uint32_t value = mmio_read_32(bootcount);
+
+	if ((value & BOOTCOUNT_MAGIC_MASK) == BOOTCOUNT_MAGIC) {
+		if ((value & BOOTCOUNT_MASK) == BOOTCOUNT_RESET_VALUE) {
+			INFO("Boot cnt: - (reset-on-fail)\n");
+		} else {
+			mmio_clrsetbits_32(bootcount, BOOTCOUNT_MASK, (value & BOOTCOUNT_MASK) + 1U);
+			INFO("Boot cnt: %u\n", (value & BOOTCOUNT_MASK) + 1U);
+		}
+	} else {
+		INFO("Boot cnt: - (disabled)\n");
+	}
+}
+
+bool stm32mp_bootcounter_max_reached(bool reset)
+{
+	uint32_t bootcount = tamp_bkpr(TAMP_BKP_NONSEC_BOOTCOUNT);
+	uint32_t value = mmio_read_32(bootcount);
+
+	if (((value & BOOTCOUNT_MAGIC_MASK) == BOOTCOUNT_MAGIC) &&
+		((value & BOOTCOUNT_MASK) != BOOTCOUNT_RESET_VALUE)) {
+		if ((value & BOOTCOUNT_MASK) >= BOOTCOUNT_MAX_RETRY) {
+			if (reset) {
+				mmio_setbits_32(bootcount, BOOTCOUNT_RESET_VALUE);
+			}
+			return true;
+		}
+	}
+
+	return false;
+}
+
 #if defined(IMAGE_BL32) && DEBUG
 static const char *const dump_table[] = {
 	"sp_usr  ",
-- 
2.25.1

