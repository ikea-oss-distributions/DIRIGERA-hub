From 7b0c408129a7bcb1bc32c1081f08adaad82d3f53 Mon Sep 17 00:00:00 2001
From: Christophe Guibout <christophe.guibout@st.com>
Date: Tue, 31 Aug 2021 16:21:19 +0200
Subject: [PATCH 15/18] plat/st: add management of boot partition

Give next stage boot the boot mode used (0 for normal boot,
2 for recovery).

Change-Id: I5af88fe409d7a14e7e1b74ed4bdb60047289e915

# Conflicts:
#	plat/st/stm32mp1/stm32mp1_private.c

%% original patch: 0015-plat-st-add-management-of-boot-partition.patch

%% original patch: 0015-plat-st-add-management-of-boot-partition.patch
---
 plat/st/common/bl2_io_storage.c             |  1 +
 plat/st/stm32mp1/include/stm32mp1_context.h |  6 ++++++
 plat/st/stm32mp1/stm32mp1_private.c         | 17 +++++++++++++++++
 3 files changed, 24 insertions(+)

diff --git a/plat/st/common/bl2_io_storage.c b/plat/st/common/bl2_io_storage.c
index 3d0dd34c3..edbc8e0d4 100644
--- a/plat/st/common/bl2_io_storage.c
+++ b/plat/st/common/bl2_io_storage.c
@@ -423,6 +423,7 @@ int bl2_plat_handle_pre_image_load(unsigned int image_id)
 			partition_init(GPT_IMAGE_ID);
 #if PSA_FWU_SUPPORT
 			active_fip = stm32mp_get_fip_part_index();
+			stm32_save_boot_mode((active_fip == 1U) ? BOOT_RECOVERY : BOOT_NORMAL);
 			entry = get_partition_entry(fip_part_names[active_fip]);
 			INFO("Use %s partition\n", fip_part_names[active_fip]);
 #else
diff --git a/plat/st/stm32mp1/include/stm32mp1_context.h b/plat/st/stm32mp1/include/stm32mp1_context.h
index 2c035cdca..ad9fedfb9 100644
--- a/plat/st/stm32mp1/include/stm32mp1_context.h
+++ b/plat/st/stm32mp1/include/stm32mp1_context.h
@@ -14,6 +14,11 @@
 
 #define DDR_CRC_GRANULE		32
 
+enum boot_mode {
+	BOOT_NORMAL = 0x00,
+	BOOT_RECOVERY = 0x02,
+};
+
 void stm32_clean_context(void);
 int stm32_save_context(uint32_t zq0cr0_zdata,
 		       struct stm32_rtc_calendar *rtc_time,
@@ -29,6 +34,7 @@ uint32_t stm32_get_zdata_from_context(void);
 int stm32_get_pll1_settings_from_context(void);
 bool stm32_are_pll1_settings_valid_in_context(void);
 bool stm32_pm_context_is_valid(void);
+int stm32_save_boot_mode(enum boot_mode mode);
 void stm32_save_ddr_training_area(void);
 void stm32_restore_ddr_training_area(void);
 uint32_t stm32_pm_get_optee_ep(void);
diff --git a/plat/st/stm32mp1/stm32mp1_private.c b/plat/st/stm32mp1/stm32mp1_private.c
index c57795b20..4feebdb70 100644
--- a/plat/st/stm32mp1/stm32mp1_private.c
+++ b/plat/st/stm32mp1/stm32mp1_private.c
@@ -50,6 +50,8 @@
 #define TAMP_BOOT_INDEX_SHIFT		16
 #define TAMP_BOOT_TRIAL_MASK		GENMASK(31, 24)
 #define TAMP_BOOT_TRIAL_SHIFT		24
+#define TAMP_BOOT_MODE_MASK		GENMASK(7, 0)
+#define TAMP_BOOT_MODE_SHIFT		0
 
 #if defined(IMAGE_BL2)
 #define MAP_SEC_SYSRAM	MAP_REGION_FLAT(STM32MP_SYSRAM_BASE, \
@@ -750,6 +752,21 @@ bool stm32mp1_is_wakeup_from_standby(void)
 	return stm32_pm_context_is_valid();
 }
 
+int stm32_save_boot_mode(enum boot_mode mode)
+{
+	uint32_t bkpr_itf_idx = tamp_bkpr(TAMP_BOOT_ITF_BACKUP_REG_ID);
+
+	clk_enable(RTCAPB);
+
+	mmio_clrsetbits_32(bkpr_itf_idx,
+			   TAMP_BOOT_MODE_MASK,
+			   mode << TAMP_BOOT_MODE_SHIFT);
+
+	clk_disable(RTCAPB);
+
+	return 0;
+}
+
 int stm32_save_boot_interface(uint32_t interface, uint32_t instance)
 {
 	uint32_t bkpr_itf_idx = tamp_bkpr(TAMP_BOOT_ITF_BACKUP_REG_ID);
-- 
2.17.1

