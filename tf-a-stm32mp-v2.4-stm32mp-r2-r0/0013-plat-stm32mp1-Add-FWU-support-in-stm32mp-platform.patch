From 9d94958d35efd2bf020fda4126f18925c3fbbe06 Mon Sep 17 00:00:00 2001
From: Lionel Debieve <lionel.debieve@foss.st.com>
Date: Tue, 29 Jun 2021 13:36:18 +0200
Subject: [PATCH 13/18] plat-stm32mp1: Add FWU support in stm32mp platform

Added firmware update support in STM32MP1 platforms by using
FWU platform hooks and compiling FWU driver in BL2 component.

Signed-off-by: Lionel Debieve <lionel.debieve@foss.st.com>
Change-Id: I70adf4c0ed7c443df8af95dcd7441dea1a7ff009

# Conflicts:
#	plat/st/common/stm32mp_fconf_io.c
#	plat/st/stm32mp1/platform.mk

%% original patch: 0013-plat-stm32mp1-Add-FWU-support-in-stm32mp-platform.patch

# Conflicts:
#	plat/st/common/stm32mp_fconf_io.c
#	plat/st/stm32mp1/platform.mk
---
 plat/st/common/bl2_io_storage.c         | 24 ++++++++
 plat/st/common/include/stm32mp_common.h |  5 ++
 plat/st/common/stm32mp_fconf_io.c       | 23 ++++++-
 plat/st/common/stm32mp_fwu_metadata.c   | 79 +++++++++++++++++++++++++
 plat/st/stm32mp1/platform.mk            | 22 +++++++
 5 files changed, 151 insertions(+), 2 deletions(-)
 create mode 100644 plat/st/common/stm32mp_fwu_metadata.c

diff --git a/plat/st/common/bl2_io_storage.c b/plat/st/common/bl2_io_storage.c
index 2ea9f627e..7b9875d1d 100644
--- a/plat/st/common/bl2_io_storage.c
+++ b/plat/st/common/bl2_io_storage.c
@@ -45,6 +45,10 @@ uintptr_t storage_dev_handle;
 
 static const io_dev_connector_t *fip_dev_con;
 static uint32_t nand_bkp_offset;
+#if PSA_FWU_SUPPORT
+static const char * const fip_part_names[] = {"FIP_A", "FIP_B"};
+static uint32_t active_idx;
+#endif
 
 #if STM32MP_SDMMC || STM32MP_EMMC
 static uint32_t block_buffer[MMC_BLOCK_SIZE] __aligned(MMC_BLOCK_SIZE);
@@ -389,6 +393,20 @@ void stm32mp_io_setup(void)
 	}
 }
 
+#if PSA_FWU_SUPPORT
+void stm32mp_set_fip_part_index(uint32_t active_index)
+{
+	assert(active_index < NR_OF_FW_BANKS);
+
+	active_idx = active_index;
+}
+
+int stm32mp_get_fip_part_index(void)
+{
+	return active_idx;
+}
+#endif
+
 int bl2_plat_handle_pre_image_load(unsigned int image_id)
 {
 	static bool gpt_init_done __unused;
@@ -400,9 +418,15 @@ int bl2_plat_handle_pre_image_load(unsigned int image_id)
 	case BOOT_API_CTX_BOOT_INTERFACE_SEL_FLASH_EMMC:
 		if (!gpt_init_done) {
 			const partition_entry_t *entry;
+			uint8_t active_fip __unused = 0;
 
 			partition_init(GPT_IMAGE_ID);
+#if PSA_FWU_SUPPORT
+			active_fip = stm32mp_get_fip_part_index();
+			entry = get_partition_entry(fip_part_names[active_fip]);
+#else
 			entry = get_partition_entry(FIP_IMAGE_NAME);
+#endif
 			if (entry == NULL) {
 				ERROR("Could NOT find the %s partition!\n",
 				      FIP_IMAGE_NAME);
diff --git a/plat/st/common/include/stm32mp_common.h b/plat/st/common/include/stm32mp_common.h
index 40291c43e..b2ebc07fd 100644
--- a/plat/st/common/include/stm32mp_common.h
+++ b/plat/st/common/include/stm32mp_common.h
@@ -126,6 +126,11 @@ void stm32mp_delete_loaded_header(void);
 boot_api_image_header_t *stm32mp_get_loaded_header(void);
 #endif
 
+#if PSA_FWU_SUPPORT
+void stm32mp_set_fip_part_index(uint32_t active_index);
+int stm32mp_get_fip_part_index(void);
+#endif
+
 /* Functions to map DDR in MMU with non-cacheable attribute, and unmap it */
 int stm32mp_map_ddr_non_cacheable(void);
 int stm32mp_unmap_ddr(void);
diff --git a/plat/st/common/stm32mp_fconf_io.c b/plat/st/common/stm32mp_fconf_io.c
index d07067531..f60611d75 100644
--- a/plat/st/common/stm32mp_fconf_io.c
+++ b/plat/st/common/stm32mp_fconf_io.c
@@ -1,6 +1,6 @@
 /*
- * Copyright (c) 2020, STMicroelectronics - All Rights Reserved
- * Copyright (c) 2020, ARM Limited and Contributors. All rights reserved.
+ * Copyright (c) 2020-2021, STMicroelectronics - All Rights Reserved
+ * Copyright (c) 2020-2021, ARM Limited and Contributors. All rights reserved.
  *
  * SPDX-License-Identifier: BSD-3-Clause
  */
@@ -21,6 +21,11 @@
 #include <stm32mp_io_storage.h>
 #include <stm32mp_fconf_getter.h>
 
+#if PSA_FWU_SUPPORT
+/* metadata entry details */
+static io_block_spec_t fwu_metadata_spec;
+#endif /* PSA_FWU_SUPPORT */
+
 #if STM32MP_SDMMC || STM32MP_EMMC
 static io_block_spec_t gpt_block_spec = {
 	.offset = 0,
@@ -35,6 +40,20 @@ struct plat_io_policy policies[MAX_NUMBER_IDS] = {
 		(uintptr_t)&image_block_spec,
 		open_storage
 	},
+#if PSA_FWU_SUPPORT
+	[FWU_METADATA_IMAGE_ID] = {
+		&storage_dev_handle,
+		/* filled runtime from partition information */
+		(uintptr_t)&fwu_metadata_spec,
+		open_storage
+	},
+	[BKUP_FWU_METADATA_IMAGE_ID] = {
+		&storage_dev_handle,
+		/* filled runtime from partition information */
+		(uintptr_t)&fwu_metadata_spec,
+		open_storage
+	},
+#endif /* PSA_FWU_SUPPORT */
 #if STM32MP_SDMMC || STM32MP_EMMC
 	[GPT_IMAGE_ID] = {
 		&storage_dev_handle,
diff --git a/plat/st/common/stm32mp_fwu_metadata.c b/plat/st/common/stm32mp_fwu_metadata.c
new file mode 100644
index 000000000..d8381eac2
--- /dev/null
+++ b/plat/st/common/stm32mp_fwu_metadata.c
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) 2021, Arm Limited. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#include <assert.h>
+#include <errno.h>
+
+#include <common/debug.h>
+#include <drivers/io/io_storage.h>
+#include <drivers/partition/partition.h>
+#include <drivers/fwu/fwu_metadata.h>
+#include <lib/fconf/fconf.h>
+
+#include <platform_def.h>
+#include <stm32mp_fconf_getter.h>
+
+void plat_fwu_set_images_source(struct fwu_metadata *metadata)
+{
+	stm32mp_set_fip_part_index(metadata->active_index);
+}
+
+static int get_fwu_from_gpt(unsigned int image_id, const char *part_name,
+			    uintptr_t *dev_handle, uintptr_t *image_spec)
+{
+	static bool gpt_init_done __unused;
+	const partition_entry_t *entry;
+
+	if (!gpt_init_done) {
+		partition_init(GPT_IMAGE_ID);
+		gpt_init_done = true;
+	}
+
+	entry = get_partition_entry(part_name);
+	if (entry == NULL) {
+		ERROR("Could NOT find the %s partition!\n", part_name);
+		return -ENOENT;
+	}
+
+	const struct plat_io_policy *policy = FCONF_GET_PROPERTY(stm32mp,
+								 io_policies,
+								 image_id);
+
+	assert(policy != NULL);
+	assert(policy->image_spec != 0UL);
+
+	io_block_spec_t *spec = (io_block_spec_t *)policy->image_spec;
+	/* set offset and length of the image */
+	spec->offset = entry->start;
+	spec->length = entry->length;
+
+	*dev_handle = *(policy->dev_handle);
+	*image_spec = policy->image_spec;
+
+	return 0;
+}
+
+int plat_fwu_set_metadata_image_source(unsigned int image_id,
+				       uintptr_t *dev_handle,
+				       uintptr_t *image_spec)
+{
+	int result = -1;
+
+#if STM32MP_SDMMC || STM32MP_EMMC
+	if (image_id == FWU_METADATA_IMAGE_ID) {
+		result = get_fwu_from_gpt(FWU_METADATA_IMAGE_ID,
+					  "FWU-Metadata",
+					  dev_handle,
+					  image_spec);
+	} else if (image_id == BKUP_FWU_METADATA_IMAGE_ID) {
+		result = get_fwu_from_gpt(BKUP_FWU_METADATA_IMAGE_ID,
+					  "Bkup-FWU-Metadata",
+					  dev_handle,
+					  image_spec);
+	}
+#endif
+	return result;
+}
diff --git a/plat/st/stm32mp1/platform.mk b/plat/st/stm32mp1/platform.mk
index 55acd6742..08ea8655e 100644
--- a/plat/st/stm32mp1/platform.mk
+++ b/plat/st/stm32mp1/platform.mk
@@ -72,6 +72,11 @@ STM32_RUNTIME_PARTS_NUM		:=	0
 else
 STM32_RUNTIME_PARTS_NUM		:=	1
 endif
+ifeq ($(PSA_FWU_SUPPORT),1)
+STM32_RUNTIME_PARTS_NUM		:=	$(shell echo $$(($(STM32_RUNTIME_PARTS_NUM) + \
+							 $(NR_OF_FW_BANKS))))
+endif
+
 PLAT_PARTITION_MAX_ENTRIES	:=	$(shell echo $$(($(STM32_TF_A_COPIES) + \
 							 $(STM32_BL33_PARTS_NUM) + \
 							 $(STM32_RUNTIME_PARTS_NUM))))
@@ -275,6 +280,23 @@ BL2_SOURCES		+=	drivers/io/io_block.c					\
 				drivers/st/crypto/stm32_hash.c				\
 				plat/st/stm32mp1/bl2_plat_setup.c
 
+ifeq ($(PSA_FWU_SUPPORT),1)
+# GPT support is recommended as per PSA FWU specification hence
+# PSA FWU implementation is tightly coupled with GPT support,
+# and it does not support other formats.
+FWU_MK := drivers/fwu/fwu.mk
+$(info Including ${FWU_MK})
+include ${FWU_MK}
+
+
+ZLIB_MK := lib/zlib/zlib.mk
+$(info Including ${ZLIB_MK})
+include ${ZLIB_MK}
+
+BL2_SOURCES		+=	plat/st/common/stm32mp_fwu_metadata.c			\
+				$(ZLIB_SOURCES)
+endif
+
 ifeq (${TRUSTED_BOARD_BOOT},1)
 AUTH_SOURCES		:=	drivers/auth/auth_mod.c					\
 				drivers/auth/crypto_mod.c				\
-- 
2.17.1

