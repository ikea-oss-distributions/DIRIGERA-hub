From c91b3303ff60b81e03cf9145677935356999f00e Mon Sep 17 00:00:00 2001
From: Gregory CLEMENT <gregory.clement@bootlin.com>
Date: Wed, 28 Jul 2021 14:26:05 +0200
Subject: [PATCH 9/9] rtc: rv3028: add ioctl including power backup one

ported from Alexandre Belloni patch

Signed-off-by: Gregory CLEMENT <gregory.clement@bootlin.com>
---
 drivers/rtc/rtc-rv3028.c | 132 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 125 insertions(+), 7 deletions(-)

diff --git a/drivers/rtc/rtc-rv3028.c b/drivers/rtc/rtc-rv3028.c
index 45f6e8dda462..685d5f4fd3aa 100644
--- a/drivers/rtc/rtc-rv3028.c
+++ b/drivers/rtc/rtc-rv3028.c
@@ -9,6 +9,7 @@
  */
 
 #include <linux/bcd.h>
+#include <linux/bitfield.h>
 #include <linux/bitops.h>
 #include <linux/i2c.h>
 #include <linux/interrupt.h>
@@ -74,9 +75,39 @@
 
 #define RV3028_BACKUP_TCE		BIT(5)
 #define RV3028_BACKUP_TCR_MASK		GENMASK(1,0)
+#define RV3028_BACKUP_BSM		GENMASK(3, 2)
 
 #define OFFSET_STEP_PPT			953674
 
+struct rtc_param {
+	__u64 param;
+	union {
+		__u64 uvalue;
+		__s64 svalue;
+		__u64 ptr;
+	};
+	__u32 index;
+	__u32 __pad;
+};
+
+#define RTC_PARAM_GET  _IOW('p', 0x13, struct rtc_param)  /* Get parameter */
+#define RTC_PARAM_SET  _IOW('p', 0x14, struct rtc_param)  /* Set parameter */
+
+/* parameter list */
+#define RTC_PARAM_FEATURES             0
+#define RTC_PARAM_CORRECTION           1
+#define RTC_PARAM_BACKUP_SWITCH_MODE   2
+
+#define RTC_FEATURE_ALARM		_BITUL(0)
+#define RTC_FEATURE_ALARM_RES_MINUTE	_BITUL(1)
+#define RTC_FEATURE_CORRECTION		_BITUL(2)
+#define RTC_FEATURE_BACKUP_SWITCH_MODE	_BITUL(3)
+
+#define RTC_BSM_DISABLED	0
+#define RTC_BSM_DIRECT		1
+#define RTC_BSM_LEVEL		2
+#define RTC_BSM_STANDBY		3
+
 enum rv3028_type {
 	rv_3028,
 };
@@ -256,9 +287,6 @@ static irqreturn_t rv3028_handle_irq(int irq, void *dev_id)
 		return IRQ_NONE;
 	}
 
-	if (status & RV3028_STATUS_PORF)
-		dev_warn(&rv3028->rtc->dev, "Voltage low, data loss detected.\n");
-
 	status &= ~RV3028_STATUS_PORF;
 
 	if (status & RV3028_STATUS_TF) {
@@ -316,7 +344,7 @@ static int rv3028_get_time(struct device *dev, struct rtc_time *tm)
 	tm->tm_sec  = bcd2bin(date[RV3028_SEC] & 0x7f);
 	tm->tm_min  = bcd2bin(date[RV3028_MIN] & 0x7f);
 	tm->tm_hour = bcd2bin(date[RV3028_HOUR] & 0x3f);
-	tm->tm_wday = date[RV3028_WDAY] & 0x7f;
+	tm->tm_wday = ilog2(date[RV3028_WDAY] & 0x7f);
 	tm->tm_mday = bcd2bin(date[RV3028_DAY] & 0x3f);
 	tm->tm_mon  = bcd2bin(date[RV3028_MONTH] & 0x1f) - 1;
 	tm->tm_year = bcd2bin(date[RV3028_YEAR]) + 100;
@@ -333,7 +361,7 @@ static int rv3028_set_time(struct device *dev, struct rtc_time *tm)
 	date[RV3028_SEC]   = bin2bcd(tm->tm_sec);
 	date[RV3028_MIN]   = bin2bcd(tm->tm_min);
 	date[RV3028_HOUR]  = bin2bcd(tm->tm_hour);
-	date[RV3028_WDAY]  = tm->tm_wday;
+	date[RV3028_WDAY]  = 1 << (tm->tm_wday);
 	date[RV3028_DAY]   = bin2bcd(tm->tm_mday);
 	date[RV3028_MONTH] = bin2bcd(tm->tm_mon + 1);
 	date[RV3028_YEAR]  = bin2bcd(tm->tm_year - 100);
@@ -511,6 +539,7 @@ static int rv3028_set_offset(struct device *dev, long offset)
 static int rv3028_ioctl(struct device *dev, unsigned int cmd, unsigned long arg)
 {
 	struct rv3028_data *rv3028 = dev_get_drvdata(dev);
+	struct rtc_param param;
 	int status, ret = 0;
 
 	switch (cmd) {
@@ -519,14 +548,103 @@ static int rv3028_ioctl(struct device *dev, unsigned int cmd, unsigned long arg)
 		if (ret < 0)
 			return ret;
 
-		status = status & RV3028_STATUS_PORF ? RTC_VL_DATA_INVALID : 0;
-		return put_user(status, (unsigned int __user *)arg);
+		if (status & RV3028_STATUS_PORF)
+			dev_warn(&rv3028->rtc->dev, "Voltage low, data loss detected.\n");
+
+		status &= RV3028_STATUS_PORF;
+
+		if (copy_to_user((void __user *)arg, &status, sizeof(int)))
+			return -EFAULT;
+
+		return 0;
+
+	case RTC_VL_CLR:
+		ret = regmap_update_bits(rv3028->regmap, RV3028_STATUS,
+					 RV3028_STATUS_PORF, 0);
+
+		return ret;
+
+	case RTC_PARAM_GET:
+		if (copy_from_user(&param, (void __user *)arg, sizeof(param)))
+			return -EFAULT;
+
+		switch (param.param) {
+			u32 value;
+
+		case RTC_PARAM_FEATURES:
+			if (param.index != 0)
+				return -EINVAL;
+			param.uvalue = RTC_FEATURE_ALARM |
+				       RTC_FEATURE_CORRECTION |
+				       RTC_FEATURE_BACKUP_SWITCH_MODE;
+			break;
+
+		case RTC_PARAM_BACKUP_SWITCH_MODE:
+			ret = regmap_read(rv3028->regmap, RV3028_BACKUP,
+					  &value);
+			if (ret < 0)
+				return ret;
+
+			value = FIELD_GET(RV3028_BACKUP_BSM, value);
+
+			switch (value) {
+			case 0x1:
+				param.uvalue = RTC_BSM_DIRECT;
+				break;
+			case 0x3:
+				param.uvalue = RTC_BSM_LEVEL;
+				break;
+			default:
+				param.uvalue = RTC_BSM_DISABLED;
+			}
+
+			break;
+
+		default:
+			return -EINVAL;
+		}
+
+		if (copy_to_user((void __user *)arg, &param, sizeof(param)))
+			return -EFAULT;
+
+		return 0;
+
+	case RTC_PARAM_SET:
+		if (copy_from_user(&param, (void __user *)arg, sizeof(param)))
+			return -EFAULT;
+
+		switch (param.param) {
+			u8 mode;
+		case RTC_PARAM_BACKUP_SWITCH_MODE:
+			switch (param.uvalue) {
+			case RTC_BSM_DIRECT:
+				mode = 0x1;
+				break;
+			case RTC_BSM_LEVEL:
+				mode = 0x3;
+				break;
+			default:
+				mode = 0x3;
+			}
+
+			rv3028_update_cfg(rv3028, RV3028_BACKUP,
+					  RV3028_BACKUP_BSM,
+					  FIELD_PREP(RV3028_BACKUP_BSM, mode));
+
+			break;
+
+		default:
+			return -EINVAL;
+		}
+
+		return 0;
 
 	default:
 		return -ENOIOCTLCMD;
 	}
 }
 
+
 static int rv3028_nvram_write(void *priv, unsigned int offset, void *val,
 			      size_t bytes)
 {
-- 
2.30.2

